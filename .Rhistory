# as I know tract values should be > 0, I am removing participants who score 0
s1.data <- s1.data %>% filter(FA > 0.01)
s1.data    <- s1.data %>% distinct(sub, tract_name, .keep_all = TRUE) # just removing some duplicate records
# now, show the data
s1.data %>% head(5)
ggplot(s1.data, aes(x=tract_name, y=FA, fill = tract_name, colour = tract_name)) +
geom_flat_violin(position = position_nudge(x = .25, y = 0), adjust =2, trim =
TRUE) +
geom_point(position=position_jitter(width=.15), size=.25) +
geom_boxplot(aes(x = tract_name, y = FA), outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
scale_y_continuous(limits=c(0.2,0.6)) + coord_flip() +
ylab('FA') + xlab('connection') + theme_cowplot() +
guides(fill = FALSE, colour = FALSE) +
theme(axis.title.x = element_text(face = "italic"))
outliers <- s1.data %>% group_by(tract_name) %>%
filter(((FA - mean(FA))/sd(FA)) > 3.29)
outliers
s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
pivot_wider(id_cols=sub, names_from=tract_name, values_from=FA) %>%
drop_na()
s1.dat.wide <- s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
pivot_wider(id_cols=sub, names_from=tract_name, values_from=FA) %>%
drop_na()
p <- s1.dat.wide %>% select(-sub) %>% ggpairs(cardinality_threshold = 16)
p
s1.dat.wide <- s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
pivot_wider(id_cols=sub, names_from=tract_name, values_from=FA) %>%
drop_na()
#s1.dat.wide %>% select(-sub) %>% ggpairs(cardinality_threshold = 16)
s1.dat.wide %>% select(-sub) %>% pairs()
s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
max(vars$Var)/min(vars$Var)
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
print(paste("ratio of largest to smallest variances:" max(vars$Var)/min(vars$Var), sep=" "))
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
paste("ratio of largest to smallest variances:" max(vars$Var)/min(vars$Var), sep=" ")
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
paste(c("ratio of largest to smallest variances:" max(vars$Var)/min(vars$Var)), sep=" ")
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
sprintf("ratio of largest to smallest variances: %d" max(vars$Var)/min(vars$Var)))
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
sprintf("ratio of largest to smallest variances: %d", max(vars$Var)/min(vars$Var)))
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
sprintf("ratio of largest to smallest variances: %d", max(vars$Var)/min(vars$Var))
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
sprintf("ratio of largest to smallest variances: %f", max(vars$Var)/min(vars$Var))
mhl.mat <- as.matrix(mhl.dat[,2:length(colnames(mhl.dat))])
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(mhl.dat))])
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
mhl.cov <- cov(mhl.mat)
mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
hist(mhl.dist, breaks = 20)
# mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
# mhl.cov <- cov(mhl.mat)
# mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
# hist(mhl.dist, breaks = 20)
s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
group_by(tract_name) %>%
doo(~mahalanobis_distance(.)) %>%
filter(is.outlier == TRUE))
# mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
# mhl.cov <- cov(mhl.mat)
# mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
# hist(mhl.dist, breaks = 20)
s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
group_by(tract_name) %>%
doo(~mahalanobis_distance(.)) %>%
filter(is.outlier == TRUE)
# mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
# mhl.cov <- cov(mhl.mat)
# mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
# hist(mhl.dist, breaks = 20)
s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
group_by(tract_name) %>%
do(~mahalanobis_distance(.)) %>%
filter(is.outlier == TRUE)
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
mhl.cov <- cov(mhl.mat)
mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
hist(mhl.dist, breaks = 20)
.05*100
.001*100
head(mhl.dist)
mhl.dist
? qchisq
pchisq(mhl.dist, df=length(mhl.dist)-1)
pchisq(mhl.dist, df=length(mhl.dist)-1) < .001
qchisq(.001, df=length(mhl.dist)-1)
sprintf("For a Mahalanobis to be less that .1% likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1), qchisq(.001, df=length(mhl.dist)-1))
sprintf("For a Mahalanobis to be less that .1% likely to have occured by chance, given our degrees of feedom (n-1), it has to be a value greater than %f", qchisq(.001, df=length(mhl.dist)-1))
sprintf("For a Mahalanobis to be less that .1 % likely to have occured by chance, given our degrees of feedom (n-1), it has to be a value greater than %f", qchisq(.001, df=length(mhl.dist)-1))
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", round(length(mhl.dist)-1), qchisq(.001, df=length(mhl.dist)-1))
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
rm(list=ls())
library(corpcor)
library(GPArotation)
library(psych)
library(ggcorrplot)
library(tidyverse)
library(cowplot)
library(GGally)
source("../KG_data-wrangling.R")
source("../R_rainclouds.R")
library(rmarkdown)    # You need this library to run this template.
library(epuRate)      # Install with devtools: install_github("holtzy/epuRate", force=TRUE)
# My tracts of interest are based on: https://pubmed.ncbi.nlm.nih.gov/25740516/#&gid=article-figures&pid=figure-2-uid-1
fpath <- '~/Dropbox/QBI/pathways-to-practice/dti-data/' # filepath to where the data lives
tracts <- list(c("Superior_Frontal_gyrus_dorsolateral_Left",   "Caudate_nucleus_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Caudate_nucleus_Left"),
c("Supplementary_motor_area_Left",              "Caudate_nucleus_Left"),
c("Inferior_Parietal_gyrus_Left",               "Caudate_nucleus_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Left",   "Lenticular_nucleus_putamen_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Lenticular_nucleus_putamen_Left"),
c("Supplementary_motor_area_Left",              "Lenticular_nucleus_putamen_Left"),
c("Inferior_Parietal_gyrus_Left",               "Lenticular_nucleus_putamen_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Caudate_nucleus_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Caudate_nucleus_Right"),
c("Supplementary_motor_area_Right",              "Caudate_nucleus_Right"),
c("Inferior_Parietal_gyrus_Right",               "Caudate_nucleus_Right"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Lenticular_nucleus_putamen_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Lenticular_nucleus_putamen_Right"),
c("Supplementary_motor_area_Right",              "Lenticular_nucleus_putamen_Right"),
c("Inferior_Parietal_gyrus_Right",               "Lenticular_nucleus_putamen_Right")
)  # has to be written exactly as is written in the list file
sub.data <- GetDTIData(fpath, tracts)
# My tracts of interest are based on: https://pubmed.ncbi.nlm.nih.gov/25740516/#&gid=article-figures&pid=figure-2-uid-1
fpath <- '~/Dropbox/QBI/pathways-to-practice/dti-data/' # filepath to where the data lives
tracts <- list(c("Superior_Frontal_gyrus_dorsolateral_Left",   "Caudate_nucleus_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Caudate_nucleus_Left"),
c("Supplementary_motor_area_Left",              "Caudate_nucleus_Left"),
c("Inferior_Parietal_gyrus_Left",               "Caudate_nucleus_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Left",   "Lenticular_nucleus_putamen_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Lenticular_nucleus_putamen_Left"),
c("Supplementary_motor_area_Left",              "Lenticular_nucleus_putamen_Left"),
c("Inferior_Parietal_gyrus_Left",               "Lenticular_nucleus_putamen_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Caudate_nucleus_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Caudate_nucleus_Right"),
c("Supplementary_motor_area_Right",              "Caudate_nucleus_Right"),
c("Inferior_Parietal_gyrus_Right",               "Caudate_nucleus_Right"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Lenticular_nucleus_putamen_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Lenticular_nucleus_putamen_Right"),
c("Supplementary_motor_area_Right",              "Lenticular_nucleus_putamen_Right"),
c("Inferior_Parietal_gyrus_Right",               "Lenticular_nucleus_putamen_Right")
)  # has to be written exactly as is written in the list file
sub.data <- GetDTIData(fpath, tracts)
N_tracts = 16
sub.data$tract_name <- rep( c("LDLPFC_LCN", "LIFJ_LCN", "LSMA_LCN", "LIPL_LCN", "LDLPFC_LPut", "LIFJ_LPut", "LSMA_LPut", "LIPL_LPut",
"RDLPFC_RCN", "RIFJ_RCN", "RSMA_RCN", "RIPL_RCN", "RDLPFC_RPut", "RIFJ_RPut", "RSMA_RPut", "RIPL_RPut"),
times = length(sub.data$sub)/N_tracts )
N_tracts = 16
sub.data$tract_name <- rep( c("LDLPFC_LCN", "LIFJ_LCN", "LSMA_LCN", "LIPL_LCN", "LDLPFC_LPut", "LIFJ_LPut", "LSMA_LPut", "LIPL_LPut",
"RDLPFC_RCN", "RIFJ_RCN", "RSMA_RCN", "RIPL_RCN", "RDLPFC_RPut", "RIFJ_RPut", "RSMA_RPut", "RIPL_RPut"),
times = length(sub.data$sub)/N_tracts )
# 2. As we lost some session 1 data in a back up malfunction back in 2014, I am going to take the session 1 data
# from as many participants as possible, and those who do not have session 1 data, I will take their data from
# session 2
# ---------------------------------------------------------------------------------------------------------------
sub.data <- sub.data %>% distinct(sub, tract_name, .keep_all = TRUE) # first remove some duplicate records that got in the list
# 2. get the data from the 1st session and label the factors
# --------------------------------------------------------------------------------
sub.data <- sub.data %>% distinct(sub, tract_name, .keep_all = TRUE) # just removing some duplicate records
s1.data <- sub.data %>% filter(session == 0)
s1.data$sub <- as.factor(s1.data$sub)
s1.data$group <- as.factor(s1.data$group)
levels(s1.data$group) <- c("practice", "control")
s1.data$session <- as.factor(s1.data$session)
levels(s1.data$session) <- c("pre", "post")
s1.data$tract_name <- as.factor(s1.data$tract_name)
unique(s1.data$sub)
unique(sub.data$sub)
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[is.member(unique(sub.data$sub), unique(s1.data$sub))]
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[unique(sub.data$sub) %in% unique(s1.data$sub)]
missed.subs
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[unique(sub.data$sub) !%in% unique(s1.data$sub)]
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[!(unique(sub.data$sub) %in% unique(s1.data$sub))]
missed.subs
sub.data[sub.data$sub %in% missed.subs, ]
s1.data <- rbind(s1.data, sub.data[sub.data$sub %in% missed.subs, ])
sub.data$sub <- as.factor(sub.data$sub)
rm(list=ls())
library(corpcor)
library(GPArotation)
library(psych)
library(ggcorrplot)
library(tidyverse)
library(cowplot)
library(GGally)
source("../KG_data-wrangling.R")
source("../R_rainclouds.R")
library(rmarkdown)    # You need this library to run this template.
library(epuRate)      # Install with devtools: install_github("holtzy/epuRate", force=TRUE)
# My tracts of interest are based on: https://pubmed.ncbi.nlm.nih.gov/25740516/#&gid=article-figures&pid=figure-2-uid-1
fpath <- '~/Dropbox/QBI/pathways-to-practice/dti-data/' # filepath to where the data lives
tracts <- list(c("Superior_Frontal_gyrus_dorsolateral_Left",   "Caudate_nucleus_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Caudate_nucleus_Left"),
c("Supplementary_motor_area_Left",              "Caudate_nucleus_Left"),
c("Inferior_Parietal_gyrus_Left",               "Caudate_nucleus_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Left",   "Lenticular_nucleus_putamen_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Lenticular_nucleus_putamen_Left"),
c("Supplementary_motor_area_Left",              "Lenticular_nucleus_putamen_Left"),
c("Inferior_Parietal_gyrus_Left",               "Lenticular_nucleus_putamen_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Caudate_nucleus_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Caudate_nucleus_Right"),
c("Supplementary_motor_area_Right",              "Caudate_nucleus_Right"),
c("Inferior_Parietal_gyrus_Right",               "Caudate_nucleus_Right"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Lenticular_nucleus_putamen_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Lenticular_nucleus_putamen_Right"),
c("Supplementary_motor_area_Right",              "Lenticular_nucleus_putamen_Right"),
c("Inferior_Parietal_gyrus_Right",               "Lenticular_nucleus_putamen_Right")
)  # has to be written exactly as is written in the list file
sub.data <- GetDTIData(fpath, tracts)
# 1. name the tracts
# --------------------------------------------------------------------------------
N_tracts = 16
sub.data$tract_name <- rep( c("LDLPFC_LCN", "LIFJ_LCN", "LSMA_LCN", "LIPL_LCN", "LDLPFC_LPut", "LIFJ_LPut", "LSMA_LPut", "LIPL_LPut",
"RDLPFC_RCN", "RIFJ_RCN", "RSMA_RCN", "RIPL_RCN", "RDLPFC_RPut", "RIFJ_RPut", "RSMA_RPut", "RIPL_RPut"),
times = length(sub.data$sub)/N_tracts )
# 2. get the data from the 1st session and label the factors
# --------------------------------------------------------------------------------
sub.data <- sub.data %>% distinct(sub, tract_name, .keep_all = TRUE) # just removing some duplicate records
sub.data$sub <- as.factor(sub.data$sub)
s1.data <- sub.data %>% filter(session == 0)
s1.data$sub <- as.factor(s1.data$sub)
missed.subs <- unique(sub.data$sub)[!(unique(sub.data$sub) %in% unique(s1.data$sub))]
s1.data <- rbind(s1.data, sub.data[sub.data$sub %in% missed.subs, ])
unique(s1.data$sub)
# My tracts of interest are based on: https://pubmed.ncbi.nlm.nih.gov/25740516/#&gid=article-figures&pid=figure-2-uid-1
fpath <- '~/Dropbox/QBI/pathways-to-practice/dti-data/' # filepath to where the data lives
tracts <- list(c("Superior_Frontal_gyrus_dorsolateral_Left",   "Caudate_nucleus_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Caudate_nucleus_Left"),
c("Supplementary_motor_area_Left",              "Caudate_nucleus_Left"),
c("Inferior_Parietal_gyrus_Left",               "Caudate_nucleus_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Left",   "Lenticular_nucleus_putamen_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Lenticular_nucleus_putamen_Left"),
c("Supplementary_motor_area_Left",              "Lenticular_nucleus_putamen_Left"),
c("Inferior_Parietal_gyrus_Left",               "Lenticular_nucleus_putamen_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Caudate_nucleus_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Caudate_nucleus_Right"),
c("Supplementary_motor_area_Right",              "Caudate_nucleus_Right"),
c("Inferior_Parietal_gyrus_Right",               "Caudate_nucleus_Right"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Lenticular_nucleus_putamen_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Lenticular_nucleus_putamen_Right"),
c("Supplementary_motor_area_Right",              "Lenticular_nucleus_putamen_Right"),
c("Inferior_Parietal_gyrus_Right",               "Lenticular_nucleus_putamen_Right")
)  # has to be written exactly as is written in the list file
sub.data <- GetDTIData(fpath, tracts)
# 1. name the tracts
# --------------------------------------------------------------------------------
N_tracts = 16
sub.data$tract_name <- rep( c("LDLPFC_LCN", "LIFJ_LCN", "LSMA_LCN", "LIPL_LCN", "LDLPFC_LPut", "LIFJ_LPut", "LSMA_LPut", "LIPL_LPut",
"RDLPFC_RCN", "RIFJ_RCN", "RSMA_RCN", "RIPL_RCN", "RDLPFC_RPut", "RIFJ_RPut", "RSMA_RPut", "RIPL_RPut"),
times = length(sub.data$sub)/N_tracts )
# 2. get the data from the 1st session and label the factors
# --------------------------------------------------------------------------------
sub.data <- sub.data %>% distinct(sub, tract_name, .keep_all = TRUE) # just removing some duplicate records
sub.data$sub <- as.factor(sub.data$sub)
# get s1 data
s1.data <- sub.data %>% filter(session == 0)
s1.data$sub <- as.factor(s1.data$sub)
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[!(unique(sub.data$sub) %in% unique(s1.data$sub))]
s1.data <- rbind(s1.data, sub.data[sub.data$sub %in% missed.subs, ])
# now I can proceed to label the rest of the factors
s1.data$group <- as.factor(s1.data$group)
levels(s1.data$group) <- c("practice", "control")
s1.data$session <- as.factor(s1.data$session)
levels(s1.data$session) <- c("pre", "post")
s1.data$tract_name <- as.factor(s1.data$tract_name)
# 3. remove known outliers
# --------------------------------------------------------------------------------
# as I know tract values should be > 0, I am removing participants who score 0 on a tract
s1.data <- s1.data %>% filter(FA > 0.01)
# now, show the data
s1.data %>% head(5)
ggplot(s1.data, aes(x=tract_name, y=FA, fill = tract_name, colour = tract_name)) +
geom_flat_violin(position = position_nudge(x = .25, y = 0), adjust =2, trim =
TRUE) +
geom_point(position=position_jitter(width=.15), size=.25) +
geom_boxplot(aes(x = tract_name, y = FA), outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
scale_y_continuous(limits=c(0.2,0.6)) + coord_flip() +
ylab('FA') + xlab('connection') + theme_cowplot() +
guides(fill = FALSE, colour = FALSE) +
theme(axis.title.x = element_text(face = "italic"))
outliers <- s1.data %>% group_by(tract_name) %>%
filter(((FA - mean(FA))/sd(FA)) > 3.29)
outliers
# use tidyverse functionality to convert from long to wide
s1.dat.wide <- s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
pivot_wider(id_cols=sub, names_from=tract_name, values_from=FA) %>%
drop_na()
# apply the pairs() function to my new dataframe - see https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/pairs for function documentation
s1.dat.wide %>% select(-sub) %>% pairs()
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
sprintf("ratio of largest to smallest variances: %f", max(vars$Var)/min(vars$Var))
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
mhl.cov <- cov(mhl.mat)
mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
hist(mhl.dist, breaks = 20)
sprintf("For a Mahalanobis to be less that .1 per cent likely to have occured by chance, given our degrees of feedom (%f), it has to be a value greater than %f", length(mhl.dist)-1, qchisq(.001, df=length(mhl.dist)-1))
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
mhl.cov <- cov(mhl.mat)
mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
hist(mhl.dist, breaks = 20)
# My tracts of interest are based on: https://pubmed.ncbi.nlm.nih.gov/25740516/#&gid=article-figures&pid=figure-2-uid-1
fpath <- '~/Dropbox/QBI/pathways-to-practice/dti-data/' # filepath to where the data lives
tracts <- list(c("Superior_Frontal_gyrus_dorsolateral_Left",   "Caudate_nucleus_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Caudate_nucleus_Left"),
c("Supplementary_motor_area_Left",              "Caudate_nucleus_Left"),
c("Inferior_Parietal_gyrus_Left",               "Caudate_nucleus_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Left",   "Lenticular_nucleus_putamen_Left"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Left", "Lenticular_nucleus_putamen_Left"),
c("Supplementary_motor_area_Left",              "Lenticular_nucleus_putamen_Left"),
c("Inferior_Parietal_gyrus_Left",               "Lenticular_nucleus_putamen_Left"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Caudate_nucleus_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Caudate_nucleus_Right"),
c("Supplementary_motor_area_Right",              "Caudate_nucleus_Right"),
c("Inferior_Parietal_gyrus_Right",               "Caudate_nucleus_Right"),
c("Superior_Frontal_gyrus_dorsolateral_Right",   "Lenticular_nucleus_putamen_Right"), # amend this to contain which tracts you seek
c("Inferior_frontal_gyrus_opercular_part_Right", "Lenticular_nucleus_putamen_Right"),
c("Supplementary_motor_area_Right",              "Lenticular_nucleus_putamen_Right"),
c("Inferior_Parietal_gyrus_Right",               "Lenticular_nucleus_putamen_Right")
)  # has to be written exactly as is written in the list file
sub.data <- GetDTIData(fpath, tracts)
# 1. name the tracts
# --------------------------------------------------------------------------------
N_tracts = 16
sub.data$tract_name <- rep( c("LDLPFC_LCN", "LIFJ_LCN", "LSMA_LCN", "LIPL_LCN", "LDLPFC_LPut", "LIFJ_LPut", "LSMA_LPut", "LIPL_LPut",
"RDLPFC_RCN", "RIFJ_RCN", "RSMA_RCN", "RIPL_RCN", "RDLPFC_RPut", "RIFJ_RPut", "RSMA_RPut", "RIPL_RPut"),
times = length(sub.data$sub)/N_tracts )
# 2. get the data from the 1st session and label the factors
# --------------------------------------------------------------------------------
sub.data <- sub.data %>% distinct(sub, tract_name, .keep_all = TRUE) # just removing some duplicate records
sub.data$sub <- as.factor(sub.data$sub)
# get s1 data
s1.data <- sub.data %>% filter(session == 0)
s1.data$sub <- as.factor(s1.data$sub)
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[!(unique(sub.data$sub) %in% unique(s1.data$sub))]
s1.data <- rbind(s1.data, sub.data[sub.data$sub %in% missed.subs, ])
# now I can proceed to label the rest of the factors
s1.data$group <- as.factor(s1.data$group)
levels(s1.data$group) <- c("practice", "control")
s1.data$session <- as.factor(s1.data$session)
levels(s1.data$session) <- c("pre", "post")
s1.data$tract_name <- as.factor(s1.data$tract_name)
# 3. remove known outliers
# --------------------------------------------------------------------------------
# as I know tract values should be > 0, I am removing participants who score 0 on a tract
s1.data <- s1.data %>% filter(FA > 0.01)
# now, show the data
s1.data %>% head(5)
sub.data[sub.data$sub %in% missed.subs, ]
# now I can proceed to label the rest of the factors
s1.data$group <- as.factor(s1.data$group)
levels(s1.data$group) <- c("practice", "control")
s1.data$session <- as.factor(s1.data$session)
levels(s1.data$session) <- c("pre", "post")
s1.data$tract_name <- as.factor(s1.data$tract_name)
# 3. remove known outliers
# --------------------------------------------------------------------------------
# as I know tract values should be > 0, I am removing participants who score 0 on a tract
s1.data <- s1.data %>% filter(FA > 0.01)
# now, show the data
s1.data %>% head(5)
length(unique(s1.data$sub))
ggplot(s1.data, aes(x=tract_name, y=FA, fill = tract_name, colour = tract_name)) +
geom_flat_violin(position = position_nudge(x = .25, y = 0), adjust =2, trim =
TRUE) +
geom_point(position=position_jitter(width=.15), size=.25) +
geom_boxplot(aes(x = tract_name, y = FA), outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
scale_y_continuous(limits=c(0.2,0.6)) + coord_flip() +
ylab('FA') + xlab('connection') + theme_cowplot() +
guides(fill = FALSE, colour = FALSE) +
theme(axis.title.x = element_text(face = "italic"))
outliers <- s1.data %>% group_by(tract_name) %>%
filter(((FA - mean(FA))/sd(FA)) > 3.29)
outliers
# use tidyverse functionality to convert from long to wide
s1.dat.wide <- s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
pivot_wider(id_cols=sub, names_from=tract_name, values_from=FA) %>%
drop_na()
# apply the pairs() function to my new dataframe - see https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/pairs for function documentation
s1.dat.wide %>% select(-sub) %>% pairs()
unique(s1.data$sub)
lengt(unique(s1.data$sub))
length(unique(s1.data$sub))
# get the variance of each tract
vars <- s1.data %>% select(c(tract_name, FA)) %>%
group_by(tract_name) %>%
summarise(Var=var(FA))
# divide the largest by the smallest
sprintf("ratio of largest to smallest variances: %f", max(vars$Var)/min(vars$Var))
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
mhl.cov <- cov(mhl.mat)
mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
hist(mhl.dist, breaks = 20)
mhl.dist
View(s1.data)
View(s1.data.wide)
View(s1.dat.wide)
# get s1 data
s1.data <- sub.data %>% filter(session == 0)
s1.data$sub <- as.factor(s1.data$sub)
# because we lost some session 1 DTI data in the great back up miss of 2014, I am going to work out who does not have session 1 data, and I'll add their session 2 data to this dataframe
missed.subs <- unique(sub.data$sub)[!(unique(sub.data$sub) %in% unique(s1.data$sub))]
s1.data <- rbind(s1.data, sub.data[sub.data$sub %in% missed.subs, ])
View(s1.data)
# now I can proceed to label the rest of the factors
s1.data$group <- as.factor(s1.data$group)
levels(s1.data$group) <- c("practice", "control")
s1.data$session <- as.factor(s1.data$session)
levels(s1.data$session) <- c("pre", "post")
s1.data$tract_name <- as.factor(s1.data$tract_name)
length(unique(s1.data$sub))
# 3. remove known outliers
# --------------------------------------------------------------------------------
# as I know tract values should be > 0, I am removing participants who score 0 on a tract
s1.data <- s1.data %>% filter(FA > 0.01)
length(unique(s1.data$sub))
ggplot(s1.data, aes(x=tract_name, y=FA, fill = tract_name, colour = tract_name)) +
geom_flat_violin(position = position_nudge(x = .25, y = 0), adjust =2, trim =
TRUE) +
geom_point(position=position_jitter(width=.15), size=.25) +
geom_boxplot(aes(x = tract_name, y = FA), outlier.shape = NA,
alpha = 0.3, width = .1, colour = "BLACK") +
scale_y_continuous(limits=c(0.2,0.6)) + coord_flip() +
ylab('FA') + xlab('connection') + theme_cowplot() +
guides(fill = FALSE, colour = FALSE) +
theme(axis.title.x = element_text(face = "italic"))
outliers <- s1.data %>% group_by(tract_name) %>%
filter(((FA - mean(FA))/sd(FA)) > 3.29)
outliers
# use tidyverse functionality to convert from long to wide
s1.dat.wide <- s1.data %>% select(-c(group, session, tract_start, tract_end)) %>%
pivot_wider(id_cols=sub, names_from=tract_name, values_from=FA) %>%
drop_na()
# apply the pairs() function to my new dataframe - see https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/pairs for function documentation
s1.dat.wide %>% select(-sub) %>% pairs()
View(s1.dat.wide)
unique(s1.dat.wide$sub)
mhl.mat <- as.matrix(s1.dat.wide[,2:length(colnames(s1.dat.wide))])
mhl.cov <- cov(mhl.mat)
mhl.dist <- mahalanobis(mhl.mat, colMeans(mhl.mat), mhl.cov)
hist(mhl.dist, breaks = 20)
cor.mat <- cor(mhl.mat)
cor.plt <- ggcorrplot(cor.mat,
hc.order = FALSE,
type = "upper",
outline.color = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726")
)
cor.plt
cor.mat <- cor(mhl.mat)
cor.plt <- ggcorrplot(cor.mat,
hc.order = FALSE,
type = "upper",
outline.color = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726")
)
cor.plt
abs(cor.mat)>.3
abs(cor.mat)>.9 # none of the correlations are higer than this
cor.mat
abs(cor.mat) < .3
which(abs(cor.mat) < .3)
abs(cor.mat) < .3
abs(cor.mat) < .25
abs(cor.mat) > .9
qqp <- ggplot(s1.data, aes(sample=sqrt(FA))) +
stat_qq() + stat_qq_line() + facet_wrap(.~tract_name)
qqp
? hist
